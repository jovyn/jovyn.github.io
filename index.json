[{"authors":["admin"],"categories":null,"content":"Welcome to my personal website that I call \u0026lsquo;Hack the Ripper\u0026rsquo; !! I named it so as it rhymes with the notorious Jack the Ripper and I find this cool. My name is Jovin Lobo, I often spell my name as \u0026lsquo;Jovyn\u0026rsquo;, apparently I find this cool too.\nI made this website to share stuff I find cool and I promise not to repeat \u0026lsquo;cool\u0026rsquo; in any other sentence.\nI specialize in web Security and I am currently working as a Security Consultant for NotSoSecure.\nI have more than 8 years of experience in the InfoSec domain and of late I have started exploring the fascinating world of DevSecOps.\nI have spoken at conferences like Cocon, nullcon and GNUnify in the past. I am a member of null - the open security community.\nI am the author of GameOver a .iso I had created as a platform with the objective of training and educating newbies about the basics of web security and educate them about the common web attacks and help them understand how they work. Unfortunately I have not been updating or maintaining it.\nCheers !!\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://hacktheripper.com/author/jovin-lobo/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/jovin-lobo/","section":"authors","summary":"Welcome to my personal website that I call \u0026lsquo;Hack the Ripper\u0026rsquo; !! I named it so as it rhymes with the notorious Jack the Ripper and I find this cool. My name is Jovin Lobo, I often spell my name as \u0026lsquo;Jovyn\u0026rsquo;, apparently I find this cool too.","tags":null,"title":"Jovin Lobo","type":"authors"},{"authors":[],"categories":[],"content":"Credits - These are my notes from Richard Bohm\u0026rsquo;s Udemy Class.\nSED   SED is a stream editor.  Structure :   sed OPTIONS \u0026hellip; [SCRIPT] [INPUTFILE\u0026hellip;.]\n  cat [INPUTFILE] | sed OPTIONS \u0026hellip; [SCRIPT]\n  SCRIPT:\n  [addr]X[options]\n [addr] - can be a single line, number, a regular expression, or range of lines. If [addr] is specified, the command X will be executed only on the matched lines. X - single-letter sed command. Additional [options] for sed command.    Eg: sed '30,35d' infile.txt \u0026gt; outfile.txt \n Delete range of lines Line 30 - line 35 from infile and save output to outfile.txt d - is the delete command      Sed by default does not alter the inputfile, only prints.\n  Sed accepts one single command at a time. To use multiple commands use -e option\n  3 ways to specify multiple instructions:\n  Using ; . Eg : sed 's/abc/replace/; s/pqr/replace2/' inputfile\n  Using the precedence \u0026lsquo;-e\u0026rsquo; . Eg: sed 's/abc/replace/' -e 's/pqr/replace2/' inputfile\n  Multiline entry:\n $ sed ' \u0026gt; s/Red/Ray/ \u0026gt; s/Dev/Development/ \u0026gt; ' emp.txt      Example file to be used throughout : emp.txt  cat emp.txt output: Name Age Unit Ant 23 IT Bec 25 HT Red 34 CEO Dua 32 FIN Wui 29 PR Wui 29 PR Van 27 Dev Kim 26 Dev  Sed Commands :   a - Append text after a line.\n  eg: Append after IT some text :  sed '/IT/a QWE ## XY' emp.txt\n output: Name Age Unit Ant 23 IT QWE ## XY Bec 25 HT Red 34 CEO Dua 32 FIN Wui 29 PR Van 27 Dev Kim 26 Dev      i 'text' - insert text before a line\n  eg: Insert before IT some text :  sed '/IT/i QWE ## XY' emp.txt\n output: Name Age Unit QWE ## XY Ant 23 IT Bec 25 HT Red 34 CEO Dua 32 FIN Wui 29 PR Van 27 Dev Kim 26 Dev      d - delete the pattern\n  eg: Delete all lines containing \u0026lsquo;Dev\u0026rsquo; :  sed '/Dev/d' emp.txt\n output: Name Age Unit Ant 23 IT Bec 25 HT Red 34 CEO Dua 32 FIN Wui 29 PR      p  - print the pattern.\n  eg:  sed -n '/Dev/p' emp.txt \u0026lsquo;-n\u0026rsquo; is used to explicitly disable print all, as sed prints all by default.\n output: Van 27 Dev Kim 26 Dev    eg: \u0026ldquo;Print 2nd line\u0026rdquo; sed -n '2p' emp.txt \n output: Ant 23 IT    eg: \u0026ldquo;Print from line 2 to 5\u0026rdquo; sed -n '2,5p' emp.txt \n output: Ant 23 IT Bec 25 HT Red 34 CEO Dua 32 FIN      c - Change command used to change lines.\n  eg: Change all lines with \u0026lsquo;Dev\u0026rsquo; to XXXXXX\u0026hellip; -  sed '/Dev/c xxxxxxxxxxxxxxxxxxxxxxx' emp.txt\n output: Name Age Unit Ant 23 IT Bec 25 HT Red 34 CEO Dua 32 FIN Wui 29 PR xxxxxxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxxxxxx      q[exit-code] - exit sed without processing any more commands or input.\n  eg: sed '/Bec/q2' emp.txt will quit once the search pattern matches and will receive exit status code 2. echo $? gives an output of  2\n output: Name Age Unit Ant 23 IT Bec 25 HT       s/regexp/replacement/[flags] - (substitute) Match the regex against the content of the pattern space. If found replace matched string with \u0026lsquo;replacement\u0026rsquo;. Use g  to substitute globally.\n  Eg: echo \u0026quot;1110000111\u0026quot; | sed 's/000/XXX/' \u0026ndash;\u0026gt; output: 111XXX0111\n  Eg:  echo \u0026quot;The quick brown fox , trots away ... \u0026quot; | sed 's/[[:space:]]/#/g'. This will replaces all spaces globally. Output : The#quick#brown#fox##,#trots#away#####...##\n  Eg: echo \u0026quot;The quick brown fox , trots away ... \u0026quot; | sed 's/[[:space:]]/#/ . Without the global flag (g) will simply replace the first instance. \u0026ndash;\u0026gt; output: The#quick brown fox , trots away ... \n  Eg: Replace specific lines in a file. sed '8s/Dev/Manager/' emp.txt \u0026ndash;\u0026gt; Replace \u0026lsquo;Dev\u0026rsquo; with \u0026lsquo;Manager\u0026rsquo; on the 8th line.\n output: Name Age Unit Ant 23 IT Bec 25 HT Red 34 CEO Dua 32 FIN Wui 29 PR Van 27 Dev Kim 26 Manager    Eg: Replace all lines we use range 1,$. Use command sed '1,$s/e/EE/' emp.txt to replace all instances of \u0026lsquo;e\u0026rsquo; with \u0026lsquo;EE\u0026rsquo;.\n output: NamEE Age Unit Ant 23 IT BEEc 25 HT REEd 34 CEO Dua 32 FIN Wui 29 PR Van 27 DEEv Kim 26 DEEv      Command-Line- Options:\n  -n - disable automatic printing; sed produced output when explicitlytold via the p command.\n  -e script - add script\n  eg: Search some text and quit with exit code 2 : sed -ne '/CEO/p' -ne '/CEO/q2' emp.txt  and echo $? will return 2.\n output: Red 34 CEO    eg: Print \u0026ldquo;000- before/after -000\u0026rdquo; before and after lines containing \u0026lsquo;Dua\u0026rsquo; : sed -e '/Dua/a 000- after -000' -e '/Dua/i 000- before -000' emp.txt \n output: Name Age Unit Ant 23 IT Bec 25 HT Red 34 CEO 000- before -000 Dua 32 FIN 000- after -000 Wui 29 PR Van 27 Dev Kim 26 Dev      -r - use extended regular expressions rather than basic regular expressions.\n  -i - Use this flag to modify the input file.\n  We take a copy of emp.txt as emp2.txt and perform the following :  sed -ni '/Wui/p' emp2.txt\n  cat emp2.txt :\n output: Wui 29 PR      e To run scripts. This is different than -e\n  sed '/Name/e echo -n \u0026quot;Date:\u0026quot;; date' emp.txt - Run and print date before \u0026lsquo;Name\u0026rsquo;.\n output: Date:Sat Aug 29 08:00:34 IST 2020 Name Age Unit Ant 23 IT Bec 25 HT Red 34 CEO Dua 32 FIN Wui 29 PR Van 27 Dev Kim 26 Dev    sed '1 e echo -n \u0026quot;Date:\u0026quot;; date' emp.txt - Print date on the first line.\n output: Date:Sat Aug 29 08:05:41 IST 2020 Name Age Unit Ant 23 IT Bec 25 HT Red 34 CEO Dua 32 FIN Wui 29 PR Van 27 Dev Kim 26 Dev     sed '1,$ e echo -n \u0026quot;Date:\u0026quot;; date' emp.txt - Print date before every line.\n output: Date:Sat Aug 29 08:16:09 IST 2020 Name Age Unit Date:Sat Aug 29 08:16:09 IST 2020 Ant 23 IT Date:Sat Aug 29 08:16:09 IST 2020 Bec 25 HT Date:Sat Aug 29 08:16:09 IST 2020 Red 34 CEO Date:Sat Aug 29 08:16:09 IST 2020 Dua 32 FIN Date:Sat Aug 29 08:16:09 IST 2020 Wui 29 PR Date:Sat Aug 29 08:16:09 IST 2020 Van 27 Dev Date:Sat Aug 29 08:16:09 IST 2020 Kim 26 Dev Date:Sat Aug 29 08:16:09 IST 2020        Sed Commands : Its not advised to have long sed scripts on commndline, a better option is to create a script file.\n Syntax: sed -f scriptfile inputfile. Where scriptfile contains the sed instructions.   AWK  Searches files for patterns and performs actions specified in the AWK body.\nStructure :    awk'program_to_perform_action' file1 file2 ...\n  Divided into 3 sections BEGIN, Main \u0026amp; END\n  BEGIN - Code specified here is executed before executing the operations on the file.\n  Main - Executed for ech line of the file.\n  END - After awk process of all lines.\n awk 'BEGIN{ code_in_BEGIN_section} {Code_in_Main_Body} END{ code_END_Section }' file1 file2 ...    Example:\n echo \u0026quot;one two three\u0026quot; | awk'BEGIN{begin_code}{main_code}END{end_code}'  Example 2:\n echo \u0026quot;one two three\u0026quot; | awk'{main_code}'  [NOTE] In AWK body, Bash features DO NOT WORK. AWK has its own syntax.   Hello World: awk 'BEGIN{print \u0026quot;Hello world !\u0026quot;}'\n  To print \u0026ldquo;Hello World !\u0026rdquo; on each line after Enter awk '{print \u0026quot;Hello world !\u0026quot;}'\n  Example: echo \u0026quot;This is one line\u0026quot; | awk 'BEGIN{print \u0026quot;start\u0026quot;}{print \u0026quot;OK\u0026quot;}END{print \u0026quot;stop\u0026quot;}' The output is as shown below. OK is printed once as there is just one line.\n Output: start OK stop    Example (lets input a file hello.txt which has 3 lines): cat hello.txt | awk 'BEGIN{print \u0026quot;start\u0026quot;}{print \u0026quot;OK\u0026quot;}END{print \u0026quot;stop\u0026quot;}' OR awk 'BEGIN{print \u0026quot;start\u0026quot;}{print \u0026quot;OK\u0026quot;}END{print \u0026quot;stop\u0026quot;}' hello.txt \n output: start OK OK OK stop    Fields :   Fields are by default seperated by space.\n  $0 prints entire line\n  $1 prints the first field and so on ..\n  Examples:\n echo \u0026quot;1 2 3 4 5\u0026quot; | awk '{print $0}' will output 1 2 3 4 5 echo \u0026quot;1 2 3 4 5\u0026quot; | awk '{print $1}' will output  1 echo \u0026quot;1 2 3 4 5\u0026quot; | awk '{print $3}' will output 3    Examples with a File (emp.txt)\n  To print all columns in the file  awk '{print $0}' emp.txt\nOutput:\n Name Age Unit Ant 23 IT Bec 25 HR Red 34 CEO Dua 32 FIN     awk '{print $1}' emp.txt\n Name Ant Bec Red Dua     awk '{print $2}' emp.txt\n Age 23 25 34 32     awk '{print $3}' emp.txt\n Unit IT HR CEO FIN     awk '{print $1,$3}' emp.txt\n Name Unit Ant IT Bec HR Red CEO Dua FIN    Search Patterns : Awk performs operations line by line. Search pattern is defined between \u0026lsquo;//\u0026rsquo;. AWK uses the default Regular Expressions\neg 1 :  awk ' /CEO/ {print $1,$3}' emp.txt\noutput: Red CEO  NF - Number of Fields :  echo \u0026quot;1 two 3 four\u0026quot; | awk '{print NF}' Output : 4 echo \u0026quot;1 two 3 four\u0026quot; | awk '{print $(NF-2)}' Output : two. $NF = 4 and using this we could do mathemetical operations. Eg. To print the second last field we could \u0026lsquo;{print $(NF-1)}\u0026rsquo;  NR - Number of Records : Records in Awk are by default seperated by a newline.\nEg 1:  echo \u0026quot;1 two 3 four\u0026quot; | awk '{print $(NR)}' . Output : 1\nEg 2:  awk '{print NR}' emp.txt\nOutput: 1 2 3 4 5 6  As awk processess line by line, for each line it prints the nos. of records found.\nTo print exact records from a file we could use END. Eg: awk 'END{print NR}' emp.txt. Output : 6\nFS - Field Seperator : Default is space. We can define custom values for the field seperator.\n Eg: echo \u0026quot;102 202 303\u0026quot; | awk 'BEGIN{FS=\u0026quot;0\u0026quot;} {print $1\u0026quot;-\u0026quot;$2\u0026quot;-\u0026quot;$3\u0026quot;-\u0026quot;$4}'  . Output of the above command :  1-2 2-2 3-3 . We used 0 as FS.  RS - Record Seperator : By default seperated by newline. Can devine custom values for RS (record seperator).\n Eg: echo \u0026quot;102 202 303\u0026quot; | awk 'BEGIN{RS=\u0026quot;0\u0026quot;} END{print NR}' . Output is 4. Now the default RS would return 1. as there is only one line. Eg. echo \u0026quot;102 202 303\u0026quot; | awk 'END{print NR}' Output : 1  AWK Variables :   Assignment :\n a=1 RS=\u0026quot;\\t\u0026quot; FS=\u0026quot;:\u0026quot;    Increment/ Decrement :\n a++ / a--  a=a+1 / a=a-1    Math Operations :\n a=b+c add a=b*c multiply a=b/c divide a=b-c subtract a=b%c Modulus a=b^c Raise var to the power a=b**c Raise var to the power    AWK - if Statement  if(condition){ command(s) } else{ command(s) }   Comparisons:  == , \u0026lt;, \u0026lt;=, \u0026gt;, \u0026gt;=, != eg: awk '{if ($1 == \u0026quot;Red\u0026quot;){print $1, $2, $3}}' emp.txt. Output would be : Red 34 CEO. OR if we want to print all fields we could also use $0 instead. Eg: awk '{if ($1 == \u0026quot;Red\u0026quot;){print $0}}' emp.txt Output : Red 34 CEO.    AWK For loops Structure:\nfor (initialization; condition; increment){ command(s) }    Eg: awk 'BEGIN{for(i=1; i\u0026lt;=3; i++){print \u0026quot;test -\u0026quot;, i}}' Output:\n test - 1 test - 2 test - 3    AWK Script files :  Structure :  awk -f awkscript inputfiles  ","date":1601202079,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1601202079,"objectID":"6349a5ae10db7476ecc7916f9325ef7e","permalink":"https://hacktheripper.com/essentials/sed-n-awk/","publishdate":"2020-09-27T15:51:19+05:30","relpermalink":"/essentials/sed-n-awk/","section":"essentials","summary":"Basics of sed and awk scripting.","tags":[],"title":"sed \u0026 awk Tutorial","type":"essentials"},{"authors":[],"categories":[],"content":"Credits - These are my notes from Richard Bohm\u0026rsquo;s Udemy Class.\nScriptitng Basics   #!/bin/bash Sha-Bang. # -Sharp !- Bang /bin/bash - invoke bash interpreter. If this line is not added all scripts would be run by  /bin/bash script.sh ls -l /bin/sh Default shell (eg\u0026gt; in Ubuntu : /bin/sh \u0026raquo; dash ) ./file.sh Execute the script in current directory. echo $PATH If file.sh path defined in PATH then file.sh can be invoked anywhere by typing the file name. export PATH=$PATH:(path/of/file) to export path. Eg. export PATH=$PATH:$(pwd)  Variables  3 Ways to assign values to a variable  VAR=value Explicit definition (no spaces after =. If space is added bash sees it as 2 arguments after VAR)  PATH=/var/lib Count =12 msg=\u0026quot;hello world\u0026rdquo;   read VAR Read Command eg: echo -n \u0026quot;Enter age:\u0026quot; read AGE  echo -n \u0026quot;Age is $AGE\u0026quot;  read -p \u0026quot;Name: \u0026quot; NAME  Read value read -sp \u0026quot;Pword: \u0026quot; PASS Read value but Entered value is NOT displayed read HOST \u0026lt; /etc/hostname Read the value of file /rtc/hostname to HOST var. Equal to assiging the output of cat /etc/hostname to the variable   VAR=$(cmd) eg: VAR=$(pwd) Command substitution  VAR=$(cmd) eg: VAR=$(pwd) $ prepend VAR=`cmd` eg: VAR=`pwd`. using backticks     Accessing variables  Access variables by prepending \u0026lsquo;$\u0026rsquo; eg:COUNT =10 echo \u0026quot;counter = $COUNT \u0026quot;    Math  let  NUMBER=5 let Result=NUMBER+5 Increment let NUMBER++ ( i.e let NUMBER+=5) Decrement let NUMBER-- ( i.e let NUMBER-=5)   (()) - Eg: RESULT=$(( NUMBER + 5 )) [] - Eg: RESULT=$[ NUMBER + 5 ] expr \u0026ndash; Need to add spaces around math operators  eg: RESULT=$(expr $NUM1 + $NUM2) eg: RESULT=`expr $NUM1 + $NUM2` Alternate approach   bc - OPERATE FLOATING POINT. Put Mathematical expression in \u0026quot;\u0026rdquo; and | bc  Eg: AREA=`echo \u0026quot;2 *$RADIUS * 3.14\u0026quot;|bc`    Arguments  Passing args to scripts Passing args into function Eg: Calling script with args  ./arg.sh A1 A2 A3 Arguments - Accessing them from scripts  $0 - script name $1 - 1st arg $2 - 2nd arg $n - Nth arg \u0026quot;$@\u0026quot; - all args, expands as \u0026ldquo;$1\u0026rdquo; \u0026ldquo;$2\u0026rdquo; \u0026ldquo;$3\u0026rdquo; etc . \u0026quot;$*\u0026quot; - all args, expand as one string \u0026ldquo;$1c$2c$3c\u0026rdquo; where c is the first character of IFS (internal dield space) usually its space.  View default IFS first char set | grep ^IFS To change IFS simply use var IFS=\u0026quot;\u0026rdquo; .Eg: IFS=\u0026quot;,\u0026quot; to change IFS char to ,   $# - Args count.    Redirection \u0026amp; Piping  STDIN (0) - STD input (data provided to the program) STDOUT (1) - STD output (what program prints.. default to the terminal) STDERR (2) - STD error (error msgs program prints) Redirection \u0026gt; or \u0026gt;\u0026gt; to append  Eg: cat file.txt \u0026gt; output.txt \u0026ndash; Redirect std output Eg: cat file.txt 1\u0026gt; output.txt \u0026ndash; (Same as above) Redirect std output Eg:cat file.txt 2\u0026gt; output.txt\u0026ndash; Redirect std error Eg: cat file.txt 1\u0026gt; output.txt 2\u0026gt; error.log \u0026ndash; Redirect std out and std error to 2 files Eg: cat file.txt 1\u0026gt; output.txt 2\u0026gt;\u0026amp;1 \u0026ndash; Redirect std err stream to std out stream Eg: cat file.txt \u0026amp;\u0026gt; output.txt \u0026ndash; Redirect std out and std error to one file wc -l file.txt Vs wc -l \u0026lt; file.txt   Piping |  sending output of one cmd to another eg: cat file | head -5 | tail -2 wc -l    Exit Status echo $?  0 - successful non-zero - not successful exit 0, exit1 \u0026hellip;. exit 255    If Else  if [cond] then statements fi   AND \u0026amp;\u0026amp; , OR || , NOT ! if elif else  For Loops  For Eg: for p in a b c; do echo $p; done For on string  $STR=A cool char will print each word on a newline for p in $STR; do echo $p; done. And if for p in \u0026quot;$STR\u0026quot;; do echo $p; done output of $STR will be printed in one line. The default IFS is space IFS=$'\\t\\n' this can be changed and For will behave accordingly. Eg. Print all txt files for p in *.txt; do echo $p; done Eg. Range for p in {1..10}; do echo $p; done loop through 1 to 10 Eg. Loop through arguments for ARG in \u0026quot;$@\u0026quot;; do echo $ARG; done C-Style Incremental and decremental  for ((i=1; i\u0026lt;=12; i++)); do echo \u0026amp;i; done  While Loop  Syntax while [cond]; do [action]; done Eg: while true; do ping 8.8.8.8; done Reading Files with While Loop :    while read line; do echo $line; done \u0026lt; \u0026quot;$FILENAME\u0026quot;    cat \u0026quot;$FILENAME\u0026quot; | while read line; do echo $line; done      Case case \u0026quot;$VAR\u0026quot; in \u0026quot;$cond1\u0026quot;) commands... ;; \u0026quot;$cond2\u0026quot;) commands.. ;; *) commands ;; esac   shift https://tldp.org/LDP/Bash-Beginners-Guide/html/sect_09_07.html  Math Operands  -eq -ne -gt -lt -ge -le  String Comparision   Compare 2 strings (notice the spaces)\n [ \u0026quot;$Str1\u0026quot; = \u0026quot;$Str2\u0026quot; ] equals [ \u0026quot;$Str1\u0026quot; != \u0026quot;$Str2\u0026quot; ] not equals [ \u0026quot;$Str1\u0026quot; = \u0026quot;Hello\u0026quot; ] [ \u0026quot;$Str1\u0026quot; != \u0026quot;Hello\u0026quot; ] [[ $Str1 = $Str2 ]] equals with [] [[ $Str1 != $Str2 ]] not equals [] [[ $Str1 = Hello ]] [[ $Str1 != Hello ]] [[ $Str1 = \u0026quot;Hello\u0026quot; ]] [] and \u0026ldquo;string\u0026rdquo; [[ $Str1 != \u0026quot;Hello\u0026quot; ]]    Test if string is empty\n [ -z \u0026quot;$Str1\u0026quot; ] - returns true if Str1 holds an empty string [ -n \u0026quot;$Str1\u0026quot; ] - rteturns if the Str1 holds a non-empty string [[ -z $Str1 ]] [[ -n $Str1 ]]    Alphabetically compare 2 strings\n [[ $Str1 \u0026gt; $Str2 ]] [[ $Str1 \u0026lt; $Str2 ]]    Wildcards\n ? Single character eg: hel? (hell,held,help ..etc) * Any nos. of characters eg: hel* (helll, helljdkljd, hel12 .. etc) [] Single character from a range. eg: hel[pqr]; hel[4-7] (help, helq. helr) (hel4, hel5, hel6, hel7) {} Comma seperated terms. eg: {*.txt, *.exe} (a.exe, b.txt, c.txt .. etc) [!] Any Character not listed eg: hel[!p] (hell, helo, helx .. etc) Gobbling patterns (character classes)  [:upper:] - Uppercase character [:lower:] - Lowercase character [:alpha:] - Alphabetic character [:digit:] - Number character [:alnum:] - Alphanumeric character [:space:] - Whitespace character (space, tab, newline)   Wildcards in string Comparision [[ $STR == \u0026lt;pattern\u0026gt; ]]   eg: [[ $STR == *.sh ]] eg: [[ $STR == log[1-9].txt ]] eg: [[ $STR == conf* ]]      RegEx\n . Any single Character eg: hel. (help, hell, helo .. etc) * Preceding Character must match 0 or more times eg: he*lo (hlo, helo, heeeelo, heelo .. etc) ? Preceding Character must match 1 or 0 times eg: he?lo (helo, hlo) ^ Start of the line marker eg: ^Hello (Line starting with Hello) $ End of the line marker eg: hello$ (Line ending with hello) [] Any of the characters enclosed in [] eg: Hel[lop] (Hell, Helo, Help) [-] Any of the characters within the range eg: file[1-3] (file1, file2, file3) [^] Any of the characters except the ones enclosed in [] eg: file[^13] (file0, file2, file4 \u0026hellip;etc) + Preceding item must match 1 or more times eg: file+ (file, files, file1, filex \u0026hellip; etc) {n} Preceding item must match n times eg: [0-9]{3} (Any 3 digit no .. 111, 134, 098, 678 .. etc) {n, } Preceding item must match at least n times eg: [0-9]{3} (Any 3 or more digit no .. 111, 134, 0981, 67887, 71236 .. etc) {n,m} Minimum and maximum nos of times the preceding item must match. eg: [0-9]{2,3} (Any 2 or 3 digit no .. 111, 134, 98, 78 .. etc) \\ Escape Character eg: he*ro (he*ro) Reg Ex Character classes :  [:upper:] - Uppercase character [:lower:] - Lowercase character [:alpha:] - Alphabetic character [:digit:] - Number character [:alnum:] - Alphanumeric character [:space:] - Whitespace character (space, tab, newline)   Reg Ex in Bash: [[ $STR =~ $REGEX ]]   eg: REGEX=\u0026quot;http://.*\\.jpg\u0026quot; (eg: http://images.jpg) ${BASH_REMATCH[0]} - Part of the STR which matches REGEX eg: (http://images.jpg) ${BASH_REMATCH[1]} - Part of the REGEX which is enclosed in the first parentheses eg: REGEX=\u0026quot;http://(.*)\\.jpg which reperesents as \u0026ldquo;images\u0026rdquo;      File System Related Tests:\n [ -e $VAR ]  - True if variable holds an existing file or dir. [ -f $VAR ]  - True if variable holds an existing regular file.  eg: if [-f $FILE]; then echo \u0026quot;$FILE exists\u0026quot;   [ -d $VAR ]  - True if variable holds an existing dir. [ -x $VAR ]  - True if variable holds an executable file. [ -L $VAR ]  - True if variable holds the path of a symlink. [ -r $VAR ]  - True if variable holds an existing file thats readable. [ -w $VAR ]  - True if variable holds an existing file thats writable.    Using \u0026amp;\u0026amp; and ||\n   if [ -f file.txt ]; then echo exists; else echo does not exists; fi    \u0026amp;\u0026amp; return if true if [ -f file.txt ] \u0026amp;\u0026amp; echo exists Output: \u0026ldquo;exists\u0026rdquo; if file.txt exists    || return if false if [ -f filex.txt ] || echo does not exist Output: \u0026ldquo;does not exist\u0026rdquo; as filex.txt is not present.    If else if [ -f filex.txt ] \u0026amp;\u0026amp; echo exists || echo does not exist eg. if [ $? -eq 0 ] \u0026amp;\u0026amp; echo exists || echo does not exist      Argument Parsing:\n  Manual parsing using Case statements with shift (https://tldp.org/LDP/Bash-Beginners-Guide/html/sect_09_07.html)\n   getopts() - easy way to parse short positional params (-f). Does not support long positional params (\u0026ndash;help)\n  getopt() Enchanced version of getopts()\n Eg: opts=`getopt -o a:🅱️cd --long file::,name:,help -- \u0026quot;$@\u0026quot; `; eval set --\u0026quot;$opts\u0026quot; eval set --\u0026quot;$opts\u0026quot; is used to parse script arguments. Short parameters specified after -o Long parameters specified after --long and parameters have to seperated by , In the end specify all arguments with -- \u0026quot;$@\u0026quot; : - Parameters with a required argument. :: - Parameters can be followed by optional parameters.  For short parameters specify optional args without spaces. Eg../script.sh -ab  where b is an optional arg. For long parameters specify optional args with =. Eg. ./script.sh --file=test.txt  where test.txt is an optional arg.        getopts() (: $OPTARG) example: while getopts a🅱️cd param; do case $param in a) echo \u0026quot;param 'a' with Argument. Access argument using $OPTARG\u0026quot; ;; b) echo \u0026quot;param 'b' with Argument. Access argument using $OPTARG\u0026quot; ;; c) echo \u0026quot;param 'c' without Argument (no colon)\u0026quot; d) echo \u0026quot;param 'd' without Argument (no colon)\u0026quot; esac done  getopt() example : #!/bin/bash echo \u0026quot;All args: $@\u0026quot; opts=`getopt -o a:🅱️cd --long file::,name:,help -- \u0026quot;$@\u0026quot;` eval set -- \u0026quot;$opts\u0026quot; echo \u0026quot;All args after getopt: $@\u0026quot; while [ $# -gt 0 ] do case \u0026quot;$1\u0026quot; in -a) echo \u0026quot;param 'a' - arg $2 \u0026quot; ;; -b) echo \u0026quot;param 'b' -arg $2 \u0026quot; shift 2 ;; -c) echo \u0026quot;param 'c'\u0026quot; shift 2 ;; -d) echo \u0026quot;param 'd'\u0026quot; shift 2 ;; --file) echo \u0026quot;param 'file' with arg $2 \u0026quot; shift 2 ;; --name) echo \u0026quot;param 'name' with arg $2\u0026quot; shift 2 ;; --help) echo \u0026quot;paaram 'help'\u0026quot; shift 2 ;; *) shift ;; esac done  Arrays  Declaring Arrays:  ARRAY=(val1 val2 \u0026hellip; valN) eg: ARRAY=(a,b,c)    Calling Arrays  ${ARRAY[0]} # a ${ARRAY[1]} # b ${ARRAY[2]} # c   Other ways to call arrays  ${ARRAY[@]} # ALL items in an array ${ARRAY[*]} # All items in an Array, delimited by first character of IFS ${!ARRAY[@]} # All indexes in the array (@/*) ${#ARRAY[@]} # Number of items in the array (@/*) ${#ARRAY[0]} # Length of item 0    Functions  Syntax:  function_name () {} OR function function_name {} Declaration of the functions should be before calling Use of local variables in functions.    ","date":1600683679,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1600683679,"objectID":"ce0afd3a625fc07f541fdd58ee870d28","permalink":"https://hacktheripper.com/essentials/scripting-bash/","publishdate":"2020-09-21T15:51:19+05:30","relpermalink":"/essentials/scripting-bash/","section":"essentials","summary":"Basics of bash scripting.","tags":[],"title":"Bash Scripting Tutorial","type":"essentials"},{"authors":[],"categories":[],"content":"Inspiration - I was happily living in the past with Blogger until I spoke to Anant who asked me \u0026ldquo;How are you going to preach about automation and DevSecOps if you do not automate your own work ?\u0026quot; That made a lot of sense and he pointed me towards Hugo/Jekyll for static site generation and Travis CI or Netlify for continuous integration.\n Rohit Salecha has an excellent blog on using Hugo + Academic with Netlify to achieve the same.\nAfter exploring the above options I chose to use Hugo with Academic theme to generate the static site and use Travis CI to build and push the static content to my gitpages repo. I found an excellent blog by Justin Ellis that really helped me clear out some of the confusions I had regarding TravisCI integration.\nLet me break it down - my set up can be broadly divided to 3 parts:\n Hugo + Academic = To generate a really awesome static website (like the one you are currently viewing) Github Pages = A repository to host the static web pages. This repo will have 2 branches i.e First a \u0026lsquo;dev\u0026rsquo; branch: where we commit all the binaries and files required by Hugo for building the production site. Second branch is a \u0026lsquo;master\u0026rsquo; branch where the production static files are pushed by Travis CI. Travis CI = To automatically pull code from the dev branch, build the static website and push the production files back to the \u0026lsquo;master\u0026rsquo; branch.  You can download Hugo from https://gohugo.io/ and follow their Quickstart Guide to install and learn how to use Hugo. I have a small \u0026ldquo;how-to\u0026rdquo; article for installing Hugo on Windows Hugo provides you with a multitude of themes and I chose Academic as I found it very comprehensive. Check out Academic docs to get started. Alternatively you may proceed to use any other theme that best suites your needs as the rest of the procedure reamins the same.\nCreate a new repository (preferably username.github.io) to host the static files of our website. Build the static website and then create a local git repo of the same. Checkout to a \u0026lsquo;dev\u0026rsquo; (or any other non-master) branch and add all the files in the site folder to staging. Set the origin of the local git to the remote repo username.github.io and commit the changes to the \u0026lsquo;dev\u0026rsquo; branch.\nGoto Travis CI, login with your Github credentials, and add the username.github.io repository for Travis to access. We now need to provide access of this repository to Travis CI, we do so by creating a GITHUB API Key and adding the GITHUB username and API key to the Travis CI Environment Variables associated with the newly added username.github.io repository. , pic On the local git repository, we will create a .travis.yml file, this is the config file that contains the actions that the Travis CI is supposed to carry after we commit to the \u0026lsquo;dev\u0026rsquo; branch. Below is the .travis.yml file which prompts Travis CI to first install Hugo from the binary location and then check if any folder \u0026ldquo;/pulic\u0026rdquo; exists to delete it. Once the script runs, Hugo generates the necessary files in a folder called \u0026ldquo;/public\u0026rdquo;. Post this script is run we delete all the other files from the root directory and copy the contents from the \u0026ldquo;public\u0026rdquo; to the root directory. We then add a CNAME file with my domain name - This is needed only if you are hosting the site on a custom domain. Checkout to master and add all the files to staging and commit. Finally \u0026ldquo;git push orgin master\u0026rdquo; and our production web static files are pushed to the master branch, which is then hosted at \u0026ldquo;https://username.github.io\u0026rdquo;\n language: python install: - sudo dpkg -i binaries/hugo*.deb - pip install Pygments before_script: | if [ -d \u0026quot;/public\u0026quot; ]; then rm -rf /public \u0026amp;\u0026amp; echo \u0026quot;Old public dir deleted ...\u0026quot; fi script: - hugo after_success: | if [ -n \u0026quot;$GITHUB_API_KEY\u0026quot; ]; then git checkout --orphan master shopt -s extglob rm -rf -v !(\u0026quot;public\u0026quot;|\u0026quot;.git\u0026quot;|\u0026quot;.git*\u0026quot;) # git rm -rf . mv public/* . rm -rf public binaries/hugo_* echo \u0026quot;hacktheripper.com\u0026quot; \u0026gt; CNAME git add -f --ignore-errors --all git -c user.name='travis' -c user.email='travis' commit -m init git push -f -q https://$GITHUB_USER:$GITHUB_API_KEY@github.com/$TRAVIS_REPO_SLUG master fi  I have created a diagram of the aforementioned workflow for a better understanding: References:\n https://gohugo.io/getting-started/quick-start/ https://sourcethemes.com/academic/docs/ https://gohugo.io/hosting-and-deployment/hosting-on-github/ https://jellis18.github.io/post/2017-12-03-continuous-integration-hugo/ https://www.rohitsalecha.com/post/create_a_personal_blog_using_hugo_academic_netlify/  PS: This post was published using the above workflow !!\n","date":1593721258,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1593721258,"objectID":"83aae8fad4f5367a7322a7275583b91a","permalink":"https://hacktheripper.com/post/blog-automation-with-hugo-and-travisci/","publishdate":"2020-07-03T01:50:58+05:30","relpermalink":"/post/blog-automation-with-hugo-and-travisci/","section":"post","summary":"Inspiration - I was happily living in the past with Blogger until I spoke to Anant who asked me \u0026ldquo;How are you going to preach about automation and DevSecOps if you do not automate your own work ?","tags":[],"title":"Automating Website Builds \u0026 Deployments with Hugo + Travis-CI","type":"post"},{"authors":[],"categories":[],"content":"This blog answers the question \u0026lsquo;Have I been Pwned APIs ?\u0026rsquo;\nI wrote a brief write-up on how the HIBP APIs work and how they are safe to use.\nInterestingly your password does not even go to the HIBP server\nThis was originally written on Blogger.\nVisit \u0026ldquo;Is it safe to use \u0026lsquo;Have I been Pwned APIs ?\u0026rsquo; \u0026ldquo; to have a read.\n","date":1591870879,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591870879,"objectID":"3ef84216bae1a8b1279d159910af3482","permalink":"https://hacktheripper.com/post/are-hibp-apis-safe/","publishdate":"2020-06-11T15:51:19+05:30","relpermalink":"/post/are-hibp-apis-safe/","section":"post","summary":"This blog answers the question \u0026lsquo;Have I been Pwned APIs ?\u0026rsquo;\nI wrote a brief write-up on how the HIBP APIs work and how they are safe to use.\nInterestingly your password does not even go to the HIBP server","tags":[],"title":"Are HIBP APIs Safe ?","type":"post"},{"authors":[],"categories":[],"content":"This blog summarizes the learnings from the book The Pheonix Project.\nI had originally written this post on my Blogger.\nVisit \u0026lsquo;The Pheonix Project - What I learned from it\u0026rsquo; to have a read.\n","date":1591438385,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591438385,"objectID":"a4f650ae64382aa13b45362b33d4ea6a","permalink":"https://hacktheripper.com/post/what-i-learnt-from-the-pheonix-project/","publishdate":"2020-06-06T15:43:05+05:30","relpermalink":"/post/what-i-learnt-from-the-pheonix-project/","section":"post","summary":"This blog summarizes the learnings from the book The Pheonix Project.\nI had originally written this post on my Blogger.\nVisit \u0026lsquo;The Pheonix Project - What I learned from it\u0026rsquo; to have a read.","tags":[],"title":"What I Learnt From the Pheonix Project","type":"post"},{"authors":[],"categories":[],"content":"Credits - These are my notes from Corey Schafer\u0026rsquo;s Youtube series - Git Tutorials - by Corey Schafer.\nFundamentals Git is a Distributed version control. \u0026hellip;Git has a local and remote repositories.\n git --version git help \u0026lt;verb\u0026gt; OR git \u0026lt;verb\u0026gt; --help  Set Configs values :\n git config --global user.name \u0026quot;Jon Doe\u0026quot; git config --global user.email \u0026quot;jondoe@example.com\u0026quot; git config --list - all values will be listed  Scenario 1 : Existing Project Local  cd /project_dir  git init // Initializes a git repo .. creates a .git/ dir  git status // Check status  touch .gitignore  // .txt file to add files dirs to be ignored by git.  git add -A  // add all files to staging area.  Eg:  git add .gitignore // add .gitignore to the repo    git commit -m \u0026quot;\u0026lt;message\u0026gt;\u0026quot;  // make changes to the local repo  git reset  // remove files from staging  git log  // log  Scenario 2 : Remote Project Repo  git clone \u0026lt;url\u0026gt; \u0026lt;location_to_clone\u0026gt; //clone remote repo to local system git remote -v // view info about the remote repo git branch -a // list all branches in the repo.  After making changes to the code, commit the changes locally before pushing\n git diff // shows changes git status // shows the modified files git add -A // add all files to staging git status // shows files are ready to be committed git commit -m \u0026quot;\u0026lt;message\u0026gt;\u0026quot; // commit changes locally git pull origin master  // pull latest code (in case there are more people working on the repo) git push origin master  // push changes to master branch on remote.  Note:Instead of working on the master branch, its recommended to create a branch of the feature to work on.\n git branch -a // list branches git branch \u0026lt;branch_name\u0026gt; // Create new branch git checkout \u0026lt;branch_name\u0026gt; // switch to \u0026lt;branch_name\u0026gt; \u0026lt;make changes to the code\u0026gt; git commit -m \u0026quot;\u0026lt;message\u0026gt;\u0026quot; // commit changes to \u0026lt;branch_name\u0026gt; git push -u origin \u0026lt;branch_name\u0026gt; // push changes to \u0026lt;branch_name\u0026gt; on remote repo  Now we need to Merge the changes in the custom branch to the master \u0026amp; then delete the custom branch.\n git checkout master // switch to master branch git pull origin master // pull the latest code git branch --merged  // lists the branches that have been merged so far git merge \u0026lt;branch_name\u0026gt; // Merge changes from \u0026lt;branch_name\u0026gt; to master. git push origin master // push the merged changes to master. git branch --merged // check if the changes from \u0026lt;branch_name\u0026gt; have been merged. git branch -d \u0026lt;branch_name\u0026gt; // Deletes branch locally git push origin --delete \u0026lt;branch_name\u0026gt; // delete branch from remote repo.  Undoing Bad commits  git status git diff  //see the code changes made  1. In case we want to change the commit message\n git commit -m \u0026quot;Wrong message\u0026quot;  // user enter a wrong commit message git log  // check the message in logs git commit --amend -m \u0026quot;Correct message\u0026quot; // Amends the commit message git log  // double-check in logs  2. In case of a committed file (Accidentally made changes to wrong branch)\nEg. Changes committed to master instead of feature branch\n git log --stat // git files changed within the commit git checkout master // switch to master. git log// copy 5-6 chars of the commit hash git checkout feature // switch to feature branch git cherry-pick \u0026lt;copied commit hash\u0026gt; // copied above commit hash git log // commit from master is now in feature branch git checkout master // go back to master branch git reset  Git Reset  Git Reset Soft:   git reset --soft \u0026lt;commit hash_str\u0026gt; In this case the 'git log'  will no longer have the commit but in the \u0026lsquo;git status\u0026rsquo; the changes will be as it is in the staging. So we wont lose any work.   Git Reset (Default/Mixed) :    git reset \u0026lt;commit hash_str\u0026gt; In this case the 'git log' will no longer have the commit just as git --soft but in this case the changes will move out of the staging area to the working area.   Git Reset Hard:   git reset --hard \u0026lt;commit hash_Str\u0026gt; In this case modifications will be completely reverted. Except for the un-tracked files.   To get rid of untracked files and directories :    git clean -df // -d for dirs; f for force  In case you run '\u0026rsquo; git reset \u0026ndash;hard\u0026rdquo; by mistake:\n  git reflog // shows commits in the order of when we last referenced them.  git checkout \u0026lt;commit hash_str\u0026gt; // Checkout to the commit hash obtained from above reflog.  git branch backup //create a backup of the previous rollback.  Git Garbage collector run once in 30 days and above retrieval will work prior to the garbage collector running.\nGit Revert: Git revert un-does the changes and adds additional commits of the changes.\n  git revert \u0026lt;commit hash_str\u0026gt;  Git Stash : [pending ]\nP.S: Originally written on my blogger\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"3e6c8b9b93027316584fac8b3490b2ad","permalink":"https://hacktheripper.com/essentials/git-basics/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/essentials/git-basics/","section":"essentials","summary":"Basic usage of Git for day to day tasks.","tags":[],"title":"Git Tutorial","type":"essentials"}]